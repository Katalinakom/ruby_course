# frozen_string_literal: true

# С этого занятия мы будем создавать объектную модель (классы и методы) для гипотетического
# приложения управления железнодорожными станциями, которое позволит управлять станциями,
# принимать и отправлять поезда, показывать информацию о них и т.д.

# Требуется написать следующие классы:
#
#   Класс Station (Станция):
# Имеет название, которое указывается при ее создании
# Может принимать поезда (по одному за раз)
# Может возвращать список всех поездов на станции, находящиеся в текущий момент
# Может возвращать список поездов на станции по типу (см. ниже): кол-во грузовых, пассажирских
# Может отправлять поезда (по одному за раз, при этом, поезд удаляется из списка поездов, находящихся на станции).
#
#   Класс Route (Маршрут):
# Имеет начальную и конечную станцию, а также список промежуточных станций.
# Начальная и конечная станции указываютсся при создании маршрута, а промежуточные могут добавляться между ними.
# Может добавлять промежуточную станцию в список
# Может удалять промежуточную станцию из списка
# Может выводить список всех станций по-порядку от начальной до конечной
#
#   Класс Train (Поезд):
# Имеет номер (произвольная строка) и тип (грузовой, пассажирский) и количество вагонов,
# эти данные указываются при создании экземпляра класса
# Может набирать скорость
# Может возвращать текущую скорость
# Может тормозить (сбрасывать скорость до нуля)
# Может возвращать количество вагонов
# Может прицеплять/отцеплять вагоны (по одному вагону за операцию,
#  метод просто увеличивает или уменьшает количество вагонов).
# Прицепка/отцепка вагонов может осуществляться только если поезд не движется.
# Может принимать маршрут следования (объект класса Route).
# При назначении маршрута поезду, поезд автоматически помещается на первую станцию в маршруте.
# Может перемещаться между станциями, указанными в маршруте.
# Перемещение возможно вперед и назад, но только на 1 станцию за раз.
# Возвращать предыдущую станцию, текущую, следующую, на основе маршрута

class Station
  # Класс создания станции

  def initialize(name)
    @name = name           # при создании присваивается имя и список поездов на станции
    @train_list = []
  end

  def get_train(train)
    @train_list << train   # добавление поезда в список поездов на станции
  end

  def all_trains
    @train_list # возвращение списка поездов на станции
  end

  # возвращение двумерного массива, где первый массив - грузовые поезда, второй - пассажирские
  def types_of_trains
    @train_list.partition { |train| train[:type] == 'грузовой' }
  end
end

class Route
  # Класс создания маршрута

  def initialize(first_st, last_st)
    @route = [first_st, last_st]       # при создании устанавливается начальная и конечная станция
  end

  def add_station(station)
    @route.insert(1, station)          # можно добавить промежуточную станцию к маршруту
  end

  def del_station(station)
    @route.delete(station)             # можно удалить станцию из маршрута
  end

  def show_stations
    puts @route # вывод маршрута
  end
end

class Train
  # Класс создания поезда

  def initialize(type_of_train, wagons_count)
    @train = { type: type_of_train, wagons: wagons_count, route: [] }
    # при создании устанавливаются тип поезда, количество вагонов,
    # маршрут(по умолчанию выдает ложь) и номер в соответствии с типом поезда
    @train[:number] = case type_of_train
                      when 'грузовой'
                        rand(1301..1398)
                      when 'пассажирский'
                        rand(451..598)
                      else
                        rand(599..1300)
                      end
    @station_now = @train[:route][0]
    @speed = 0 # скорость по умолчанию равна нулю
  end

  def current_speed
    @speed # возврат текущей скорости
  end

  def add_speed(plus_speed)
    @speed += plus_speed  # прибавление скорости
  end

  def stop
    @speed = 0            # остановка
  end

  def wagons_amount
    @train[:wagons] # возврат количества вагонов
  end

  def attach_wagon
    @train[:wagons] += 1 if @speed.zero?
  end

  # прицепление/отцепление вагона
  def detach_wagon
    @train[:wagons] -= 1 if @speed.zero?
  end

  def determine_route(route)
    @train[:route] = route # установка маршрута для поезда
  end

  def forward
    @train[:route].shift
  end

  def back
    @trainp[:route].pop
  end
end

# suburban_train = Train.new('пассажирский', 4)
# suburban_train.determine_route(Route.new(Station.new('Уфа'), Station.new('Улу-Теляк')))
# p suburban_train.wagons_amount
